
/* 14 CSS INTRO*/
/* body {
    background-color: black;
} */

/* h1 {
    color: white;
} */

/* p {
    color: white;
} */

.odd /* class is .  id is # */ {
    color: red;
}

.even {
    color: green;
}

/* 15 COLOURS*/
/* 4 types of colour: named colour, rgb(0,0,0), hexademical #ff111f ( hsl hue saturation light*/
/* click on sqaure colour to change colours and top bar where it says rgb etc to swap through all 4*/
body {
    background-color: rgb(123, 123, 123);
}
#p1 {
    color: orange;
}

#p2 {
    color: rgb(102, 222, 255);
}

#p3 {
    color: #59ff5f;
}

#p4 {
    color: hsl(301, 100%, 62%);
}

h1 {
    font-family: Roboto, verdana, arial; /* , arial is a fallback*/
}

p {
    font-family: "Open Sans", "lucida console", "courier new"; /* if font name has a space put the name in ""*/
    font-size: 1em; /* can use pixels or em. em is a standard e.g. 1em is 100%, 0.5em 50%, 1.2em = 120% etc*/
    font-weight: bold; /* to make normal dont add font-weight or font-style property to css*/ 
    font-style: italic;
}

/* going to use id's and classes to group CSS together, it may not look as neat but I think this is the best way to document everything I'm learning*/
/* 17 BORDERS*/
#h1-border {
    border: 3px solid hsl(301, 100%, 62%); /* border width, style and colour*/
    /* different styles dashed, dotted, double, groove, ridge, inset, outset, none (to remove border)*/
    border-radius: 20px; /* round the edges. higher the pixels the more rounded*/
}

#p-border { /* can apply the 3 border properties to each direction if needed */
    border-bottom: 3px solid rgb(161, 12, 12);
    border-top: 3px solid rgb(216, 216, 14);
    border-left: 3px dotted rgb(210, 137, 0);
    border-right: 3px dotted rgb(15, 216, 15);
    border-radius: 10px;
}

/* 18 SHADOWS*/
#h1-shadow {
    text-shadow: 3px 3px 5px hsl(0, 55%, 36%), -3px -3px 5px hsl(237, 96%, 37%); /* horizontal and vertical offset, blur. to add another shadow add , then code*/
}

#box1-shadow {
    width: 100px;
    height: 100px;
    background-color: hsl(0, 0%, 42%);
    box-shadow: 3px 3px 5px;
}

/* 19 MARGINS*/
/* body {
    margin: 0px;
} TO MAKE ALL ELEMENTS GO WALL TO WALL. NO MARGIN, NO SPACE BETWEEN END OF THE PAGE AND TEXT, BORDER HOWEVER SEPARATES THE 2 AS THE HIERARCHY GOES
 FOR THE PURPOSE OF THIS LESSON UNCOMMENT THIS CODE AS YOUR'E ADDING THE MARGINS IN YOURSELF BUT MARGINS ARE ALREADY PUT IN PLACE WITHOUT THIS CODE */

.margins-box19 {
    border: 5px solid;
    font-size: 5em;
    width: 250px;
    height: 250px;
    margin: auto; /* this puts both boxes in the middle*/
    /* margin-left: auto; pushes box to the right of the screen filling in as much margin on the left as possible. margin-right: auto won't do anything as stuff is already left justified*/
}

#box1-margin {
    background-color: hsl(0, 100%, 28%);
    margin-bottom: 50px; /* margin-top, left, bottom and right. to make all equal just margin: auto or XXpx*/
}

#box2-margin {
    background-color: hsl(219, 100%, 36%);
}

/* 20 FLOAT*/
/* body {
border: 3px solid;
display: flow-root; 
makes sure anything floating is kept inside the border*/
#img1-float {
    float: left;
    margin-right: 10px;
}

#img2-float {
    float: right;
    margin-left: 10px;
}

/* 21 OVERFLOW*/
/* overflow: visible. shows content outside the border (content that;s overflowed
hidden. doesn't show the text past the border. the full text still remians it canbe cop pasted
clip. same as above but you can control how much text is shown past the border and then the text stops after that
scroll. scrollbar shows up. auto displays/disables scrollbar as and when needed*/
#div1-overflow {
    border: 2px solid;
    height: 75px;
    overflow: hidden;
}

/* 22 DISPLAY*/
#div1-display {
    background-color: hsl(0, 54%, 53%);
    width: 100px;
    height: 100px;
}

#span1-display {
    background-color: hsl(240, 45%, 64%);
    width: 100px;
    height: 100px;
    display: block; /* setting display as block makes this span element behave like a block element and allows to add a width and height*/
}

#div2-display {
    background-color: hsl(0, 54%, 53%);
    width: 100px;
    height: 100px;
    display: inline-block;
}

#span2-display {
    background-color: hsl(240, 45%, 64%);
    width: 100px;
    height: 100px;
    display: inline-block; /* setting display as inline displays content inline with the text in the boxes then the empty div and span element is block (no text) then the rest of the text*/
}

/* display: none = removes that element
   visibility: hidden = the space occupied by the elements stays there, just the element becomes invisible/


/* 23 HEIGHT AND WIDTH*/
* {
    box-sizing: border-box; /* to disregard border and padding when calculating h or w add this property. can now float both boxes to the left (fill in empty space)*/
}

.hw-box {
    border: 2px solid;
    padding: 25px;
    height: auto;
    width: 50%; /* width takes up 50% of viewport but still block level (other 50% is empty/reserved for div)*/
    float: left;
}

.hw-container {
    background-color: #636363;
    height: 100vh; /* to set container height (or any height) to fill webpage use this (100 viewport height)*/
}

.hw2-box {
    border: 2px solid;
    padding: 25px;
    height: auto;
    width: 50%; /* width takes up 50% of viewport but still block level (other 50% is empty/reserved for div)*/
    float: left;
    text-align: center;

    min-height: 50%; /*max-width and min-width override the above width property*/
}

/*24 POSITIONS*/
#box1-positions {
    width: 100px;
    height: 100px;
    background-color: rgb(0, 138, 224);
    position: relative; /*can move up, down, left, right*/
    top: 50px; /* box will be pushed down 100px relative to where it normally is*/
    left: 50px; /* can also do -xx essentiall goes backwards*/
}

#box2-positions {
    width: 100px;
    height: 100px;
    background-color: rgb(5, 179, 80);
    position: fixed; /* no matter where you scroll to, the box will stay relative to the viewport (stay at the same place on the webpage) +/- the pixels you set*/
    right: 0px;
    bottom: 0px;
}

#box3-positions {
    width: 100px;
    height: 100px;
    background-color: rgb(218, 2, 193);
    position: relative;
    left: 200px;
}

#box4-positions {
    width: 50px;
    height: 50px;
    background-color: rgb(103, 3, 93);
    position: absolute; /* box 3 is it's nearest ancestor. if box 3 moves, it moves that many pixels also*/

}

#box5-positions {
    width: 100px;
    height: 100px;
    background-color: rgb(207, 83, 0);
    position: sticky; /* when scrolling it will come with you and when you go back to its original place it will stay there until your scroll again*/
    bottom: 0px;
}